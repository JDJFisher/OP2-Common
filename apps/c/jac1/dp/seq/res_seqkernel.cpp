//
// auto-generated by op2.py
//
#include <op_sycl_rt_support.h>
#include <iostream>

class res;
class SimpleVadd;

//user function
void res_gpu( const double *A, const double *u, double *du,
                const double *beta) {
  *du += (*beta) * (*A) * (*u);
}

//host stub function
void op_par_loop_res(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  double*arg3h = (double *)arg3.data;
  int nargs = 4;
  op_arg args[4];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;


  int    ninds   = 2;
  int    inds[4] = {-1,0,1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_0
    int part_size = OP_PART_SIZE_0;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_COLOR2);

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(double));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    int arg3_offset = consts_bytes/sizeof(double);
    arg3.data   = OP_consts_h + consts_bytes;
    arg3.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((double *)arg3.data)[d] = arg3h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(double));
    mvConstArraysToDevice(consts_bytes);
    cl::sycl::buffer<double, 1> *consts = static_cast<cl::sycl::buffer<double, 1>*>((void*)OP_consts_d);

    cl::sycl::buffer<double, 1> *arg0data = static_cast<cl::sycl::buffer<double, 1>*>((void*)arg0.dat->data_d);
    cl::sycl::buffer<double, 1> *arg1data = static_cast<cl::sycl::buffer<double, 1>*>((void*)arg1.dat->data_d);
    cl::sycl::buffer<double, 1> *arg2data = static_cast<cl::sycl::buffer<double, 1>*>((void*)arg2.dat->data_d);
    cl::sycl::buffer<int, 1> *map1data = static_cast<cl::sycl::buffer<int, 1>*>((void*)arg1.map_data_d);
    cl::sycl::buffer<int, 1> *pcol_reord = static_cast<cl::sycl::buffer<int, 1>*>((void*)Plan->col_reord);


    //execute plan
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      #ifdef OP_BLOCK_SIZE_0
      int nthread = OP_BLOCK_SIZE_0;
      #else
      int nthread = 4;//OP_block_size;
      #endif
      int start = Plan->col_offsets[0][col];
      int end = Plan->col_offsets[0][col+1];
      int nblocks = (end - start - 1)/nthread + 1;
      int set_size = set->size+set->exec_size;

      op2_queue->submit([&](cl::sycl::handler& cgh) {
          auto accessor0 = (*arg0data).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto accessor1 = (*arg1data).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto accessor2 = (*arg2data).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto accessor3 = (*consts).template get_access<cl::sycl::access::mode::read_write>(cgh);
          auto map1 = (*map1data).template get_access<cl::sycl::access::mode::read>(cgh);
          auto col_reord = (*pcol_reord).template get_access<cl::sycl::access::mode::read>(cgh);
          cl::sycl::stream out(1024, 256, cgh);
          auto kern = [=](cl::sycl::nd_item<1> item) {
          //auto kern = [=](cl::sycl::id<1> wiID) {
            //auto tid = wiID;//item.get_global_id();
            size_t tid = item.get_global_linear_id();
            if (tid + start < end) {
              auto n = col_reord[tid + start];
              //initialise local variables
              int map1idx;
              int map2idx;
              map1idx = map1[n + set_size * 1];
              map2idx = map1[n + set_size * 0];

              //user-supplied kernel call
              res_gpu(&accessor0[n*1],
                  &accessor1[map1idx*1],
                  &accessor2[map2idx*1],
                  &accessor3[arg3_offset]);
            
              //accessor2[map2idx] = 666;
              //out << "HERE " << n << " " << accessor0[tid] << " " << accessor1[map1idx*1] << " " << accessor3[arg3_offset] << " " << accessor2[0] << cl::sycl::endl;
            }
          };
          cgh.parallel_for<class res>(cl::sycl::nd_range<1>(nthread*nblocks,nthread), kern);
          //cgh.parallel_for<class res>(cl::sycl::range<1>(end-start), kern);
          });

    }
    OP_kernels[0].transfer  += Plan->transfer;
    OP_kernels[0].transfer2 += Plan->transfer2;
  }
  op2_queue->wait();
  op_mpi_set_dirtybit_cuda(nargs, args);
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].time     += wall_t2 - wall_t1;
}
