//
// auto-generated by op2.py
//

//user function
__device__ void res_calc_gpu( const double *x1, const double *x2, const double *q1,
                     const double *q2, const double *adt1, const double *adt2,
                     double *res1, double *res2)
{
  double dx, dy, mu, ri, p1, vol1, p2, vol2, f;

  dx = x1[0] - x2[0];
  dy = x1[1] - x2[1];

  ri = 1.0f / q1[0];
  p1 = gm1_cuda * (q1[3] - 0.5f * ri * (q1[1] * q1[1] + q1[2] * q1[2]));
  vol1 = ri * (q1[1] * dy - q1[2] * dx);

  ri = 1.0f / q2[0];
  p2 = gm1_cuda * (q2[3] - 0.5f * ri * (q2[1] * q2[1] + q2[2] * q2[2]));
  vol2 = ri * (q2[1] * dy - q2[2] * dx);

  mu = 0.5f * ((*adt1) + (*adt2)) * eps_cuda;

  f = 0.5f * (vol1 * q1[0] + vol2 * q2[0]) + mu * (q1[0] - q2[0]);
  res1[0] += f;
  res2[0] -= f;
  f = 0.5f * (vol1 * q1[1] + p1 * dy + vol2 * q2[1] + p2 * dy) +
      mu * (q1[1] - q2[1]);
  res1[1] += f;
  res2[1] -= f;
  f = 0.5f * (vol1 * q1[2] - p1 * dx + vol2 * q2[2] - p2 * dx) +
      mu * (q1[2] - q2[2]);
  res1[2] += f;
  res2[2] -= f;
  f = 0.5f * (vol1 * (q1[3] + p1) + vol2 * (q2[3] + p2)) + mu * (q1[3] - q2[3]);
  res1[3] += f;
  res2[3] -= f;

}

//C CUDA kernel function
__global__ void op_cuda_res_calc(
 const double* __restrict ind_arg0,
 const double* __restrict ind_arg1,
 const double* __restrict ind_arg2,
 double* __restrict ind_arg3,
 const int* __restrict opDat0Map,
 const int* __restrict opDat2Map,
 int start,
 int end,
 int set_size)
{

  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //Initialise locals
    double arg6_1[4];
    for (int d = 0; d < 4; ++d)
    {
      arg6_1[d]=ZERO_double;
    }
    double arg7_1[4];
    for (int d = 0; d < 4; ++d)
    {
      arg7_1[d]=ZERO_double;
    }
    int map0idx;
    map0idx = opDat0Map[n + set_size * 0];
    int map1idx;
    map1idx = opDat0Map[n + set_size * 1];
    int map2idx;
    map2idx = opDat2Map[n + set_size * 0];
    int map3idx;
    map3idx = opDat2Map[n + set_size * 1];

    //user function call
    res_calc_gpu(ind_arg0+map0idx*2,
                 ind_arg0+map1idx*2,
                 ind_arg1+map2idx*4,
                 ind_arg1+map3idx*4,
                 ind_arg2+map2idx*1,
                 ind_arg2+map3idx*1,
                 arg6_1,
                 arg7_1
    );

    atomicAdd(&ind_arg3[0+map2idx*4],arg6_1[0]);
    atomicAdd(&ind_arg3[1+map2idx*4],arg6_1[1]);
    atomicAdd(&ind_arg3[2+map2idx*4],arg6_1[2]);
    atomicAdd(&ind_arg3[3+map2idx*4],arg6_1[3]);
    atomicAdd(&ind_arg3[0+map3idx*4],arg7_1[0]);
    atomicAdd(&ind_arg3[1+map3idx*4],arg7_1[1]);
    atomicAdd(&ind_arg3[2+map3idx*4],arg7_1[2]);
    atomicAdd(&ind_arg3[3+map3idx*4],arg7_1[3]);
  }
}

//Host stub function
void op_par_loop_res_calc_execute(op_kernel_descriptor* desc)
{
  #ifdef OP2_JIT
    if (!jit_compiled) {
      jit_compile();
    }
    (*res_calc_function)(desc);
    return;
  #endif

  op_set set = desc->set;
  int nargs = 8;

  op_arg arg0 = desc->args[0];
  op_arg arg1 = desc->args[1];
  op_arg arg2 = desc->args[2];
  op_arg arg3 = desc->args[3];
  op_arg arg4 = desc->args[4];
  op_arg arg5 = desc->args[5];
  op_arg arg6 = desc->args[6];
  op_arg arg7 = desc->args[7];

  op_arg args[8] = {arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
  };


  //initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(2);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags > 2) {
    printf(" kernel routine with indirection: res_calc\n");
  }

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);

  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_2
      int nthread = OP_BLOCK_SIZE_2;
    #else
      int nthread = OP_block_size;
    #endif

    for (int round = 0; round < 2; ++round)
    {
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end - start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_res_calc<<<nblocks,nthread>>>(
          (double *)arg0.data_d,
          (double *)arg2.data_d,
          (double *)arg4.data_d,
          (double *)arg6.data_d,
          arg0.map_data_d,
          arg2.map_data_d,
          start,end,set->size+set->exec_size);
        cudaError_t err = cudaGetLastError();
        if (err != cudaSuccess) {
          printf("CUDA error: %s\n", cudaGetErrorString(err));
          exit(1);
        }
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);

  cutilSafeCall(cudaDeviceSynchronize());
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[2].time     += wall_t2 - wall_t1;
}

//Function called from modified source
void op_par_loop_res_calc(char const* name, op_set set,
     op_arg arg0,
     op_arg arg1,
     op_arg arg2,
     op_arg arg3,
     op_arg arg4,
     op_arg arg5,
     op_arg arg6,
     op_arg arg7)
{

  int nargs = 8;
  op_arg args[8];

  op_kernel_descriptor *desc =
  (op_kernel_descriptor *)malloc(sizeof(op_kernel_descriptor));
  desc->name = name;
  desc->set = set;
  desc->device = 1;
  desc->index = 2;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 2;

  //save the arguments
  desc->nargs = 8;
  desc->args = (op_arg *)malloc(8 * sizeof(op_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->function = op_par_loop_res_calc_execute;

  op_enqueue_kernel(desc);
}
