//
// auto-generated by op2.py
//

//user function
__device__ void save_soln_gpu( const double *q, double *qold)
{
  for (int n = 0; n < 4; n++)
    qold[n] = q[n];

}

//C CUDA kernel function
__global__ void op_cuda_save_soln(
 const double* __restrict arg0,
 double* __restrict arg1,
 int set_size)
{

  //Process set elements
  for (int n = threadIdx.x+blockIdx.x*blockDim.x; n < set_size; n += blockDim.x*gridDim.x)
  {

    //user function call
    save_soln_gpu(arg0+n*4,
                  arg1+n*4
    );

  }
}

//Host stub function
void op_par_loop_save_soln_execute(op_kernel_descriptor* desc)
{
  #ifdef OP2_JIT
    if (!jit_compiled) {
      jit_compile();
    }
    (*save_soln_function)(desc);
    return;
  #endif

  op_set set = desc->set;
  int nargs = 2;

  op_arg arg0 = desc->args[0];
  op_arg arg1 = desc->args[1];

  op_arg args[2] = {arg0,
                    arg1,
  };


  //initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags > 2) {
    printf(" kernel routine without indirection: save_soln\n");
  }

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);

  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_0
      int nthread = OP_BLOCK_SIZE_0;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_save_soln<<<nblocks,nthread>>>((double*) arg0.data_d,
                                           (double*) arg1.data_d,
                                           set->size
    );
    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
      printf("CUDA error: %s\n", cudaGetErrorString(err));
      exit(1);
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);

  cutilSafeCall(cudaDeviceSynchronize());
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = desc->name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg1.size * 2.0f;
}

//Function called from modified source
void op_par_loop_save_soln(char const* name, op_set set,
     op_arg arg0,
     op_arg arg1)
{

  int nargs = 2;
  op_arg args[2];

  op_kernel_descriptor *desc =
  (op_kernel_descriptor *)malloc(sizeof(op_kernel_descriptor));
  desc->name = name;
  desc->set = set;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;

  //save the arguments
  desc->nargs = 2;
  desc->args = (op_arg *)malloc(2 * sizeof(op_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->function = op_par_loop_save_soln_execute;

  op_enqueue_kernel(desc);
}
