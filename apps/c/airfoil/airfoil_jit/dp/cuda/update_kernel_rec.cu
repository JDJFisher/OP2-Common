//
// auto-generated by op2.py
//

#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"
//global_constants - values #defined by JIT
#include "jit_const.h"

//user function
__device__ void update_gpu( const double *qold, double *q, double *res,
                   const double *adt, double *rms)
{
  double del, adti, rmsl;

  rmsl = 0.0f;
  adti = 1.0f / (*adt);

  for (int n = 0; n < 4; n++) {
    del = adti * res[n];
    q[n] = qold[n] - del;
    res[n] = 0.0f;
    rmsl += del * del;
  }
  *rms += rmsl;

}

//C CUDA kernel function
__global__ void op_cuda_update_rec(
 const double* __restrict arg0,
 double* __restrict arg1,
 double* __restrict arg2,
 const double* __restrict arg3,
 double* arg4,
 int set_size)
{
  double arg4_1[1];
  for (int d = 0; d < 1; ++d)
  {
    arg4_1[d]=ZERO_double
  }

  //Process set elements
  for (int n = threadIdx.x+blockIdx.x*blockDim.x; n < set_size; n += blockDim.x*gridDim.x)
  {

    //user function call
    update_gpu(arg0+n*4,
               arg1+n*4,
               arg2+n*4,
               arg3+n*1,
               arg4_1
    );

  }

  //global reductions

  for (int d = 0; d < 1; ++d)
  {
    op_reduction<OP_INC>(&arg4[d+blockIdx.x*1],arg4_1[d]);
  }
}

extern "C" {
void op_par_loop_update_rec_execute(op_kernel_descriptor* desc);

//Recompiled host stub function
void op_par_loop_update_rec_execute(op_kernel_descriptor* desc)
{
  op_set set = desc->set;
  int nargs = 5;

  op_arg arg0 = desc->args[0];
  op_arg arg1 = desc->args[1];
  op_arg arg2 = desc->args[2];
  op_arg arg3 = desc->args[3];
  op_arg arg4 = desc->args[4];

  op_arg args[5] = {arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
  };

  double *arg4h = (double *)arg4.data;

  //initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags > 2) {
    printf(" kernel routine without indirection: update\n");
  }

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);

  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_4
      int nthread = OP_BLOCK_SIZE_4;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    //transfer global reduction data to GPU
    int maxblocks = nblocks;
    int reduct_bytes = 0;
    int reduct_size = 0;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
    reduct_size   = MAX(reduct_size, sizeof(double));
    reallocReductArrays(reduct_bytes);

    reduct_bytes = 0;
    arg4.data   = OP_reduct_h + reduct_bytes;
    arg4.data_d = OP_reduct_d + reduct_bytes;
    for (int b = 0; b < maxblocks; ++b)
    {
      for (int d = 0; d < 1; ++d)
      {
        ((double *)arg4.data)[d+b*1] = ZERO_double;
      }
    }
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
    mvReductArraysToDevice(reduct_bytes);

    int nshared = reduct_size*nthread;
    op_cuda_update_rec<<<nblocks,nthread,nshared>>>((double*) arg0.data_d,
                                                (double*) arg1.data_d,
                                                (double*) arg2.data_d,
                                                (double*) arg3.data_d,
                                                (double*) arg4.data_d,
                                                set->size
    );
    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
      printf("CUDA error: %s\n", cudaGetErrorString(err));
      exit(1);
    }
    //transfer global reduction data back to CPU
    mvReductArraysToHost(reduct_bytes);
    for (int b = 0; b < maxblocks; ++b)
    {
      for (int d = 0; d < 1; ++d)
      {
        arg4h[d] = arg4h[d] + ((double *)arg4.data)[d+b*1];
      }
    }
    arg4.data = (char *)arg4h;
    op_mpi_reduce(&arg4,arg4h);
  }
  op_mpi_set_dirtybit_cuda(nargs, args);

  cutilSafeCall(cudaDeviceSynchronize());
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg0.size;
  OP_kernels[4].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg2.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg3.size;
}

} //end extern c